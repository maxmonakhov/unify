/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  OwnerManager,
  OwnerManagerInterface,
} from "../../../../../@gnosis.pm/safe-contracts/contracts/base/OwnerManager";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "AddedOwner",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "threshold",
        type: "uint256",
      },
    ],
    name: "ChangedThreshold",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "RemovedOwner",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "addOwnerWithThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "changeThreshold",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOwners",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_threshold",
        type: "uint256",
      },
    ],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "prevOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "oldOwner",
        type: "address",
      },
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "swapOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610df3806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a0e67e2b1161005b578063a0e67e2b146100d2578063e318b52b146100e7578063e75235b8146100fa578063f8dc5dd91461010b57600080fd5b80630d582f13146100825780632f54bf6e14610097578063694e80c3146100bf575b600080fd5b610095610090366004610b72565b61011e565b005b6100aa6100a5366004610b9c565b610341565b60405190151581526020015b60405180910390f35b6100956100cd366004610bbe565b610396565b6100da61047c565b6040516100b69190610bd7565b6100956100f5366004610c31565b610593565b6002546040519081526020016100b6565b610095610119366004610c74565b6108b5565b610126610af8565b73ffffffffffffffffffffffffffffffffffffffff821615801590610162575073ffffffffffffffffffffffffffffffffffffffff8216600114155b8015610184575073ffffffffffffffffffffffffffffffffffffffff82163014155b6101d55760405162461bcd60e51b815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260208190526040902054161561024a5760405162461bcd60e51b815260206004820152600560248201527f475332303400000000000000000000000000000000000000000000000000000060448201526064016101cc565b600060208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d805473ffffffffffffffffffffffffffffffffffffffff858116808552604085208054929093167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600180855283549091169091179091558054916102dd83610cdf565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1806002541461033d5761033d81610396565b5050565b600073ffffffffffffffffffffffffffffffffffffffff8216600114801590610390575073ffffffffffffffffffffffffffffffffffffffff8281166000908152602081905260409020541615155b92915050565b61039e610af8565b6001548111156103f05760405162461bcd60e51b815260206004820152600560248201527f475332303100000000000000000000000000000000000000000000000000000060448201526064016101cc565b60018110156104415760405162461bcd60e51b815260206004820152600560248201527f475332303200000000000000000000000000000000000000000000000000000060448201526064016101cc565b60028190556040518181527f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c939060200160405180910390a150565b6060600060015467ffffffffffffffff81111561049b5761049b610d17565b6040519080825280602002602001820160405280156104c4578160200160208202803683370190505b506001600090815260208190527fada5013122d395ba3c54772283fb069b10426056ef8ca54750cb9bb552a59e7d549192509073ffffffffffffffffffffffffffffffffffffffff165b73ffffffffffffffffffffffffffffffffffffffff811660011461058b578083838151811061053f5761053f610d46565b73ffffffffffffffffffffffffffffffffffffffff928316602091820292909201810191909152918116600090815291829052604090912054168161058381610cdf565b92505061050e565b509092915050565b61059b610af8565b73ffffffffffffffffffffffffffffffffffffffff8116158015906105d7575073ffffffffffffffffffffffffffffffffffffffff8116600114155b80156105f9575073ffffffffffffffffffffffffffffffffffffffff81163014155b6106455760405162461bcd60e51b815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064016101cc565b73ffffffffffffffffffffffffffffffffffffffff81811660009081526020819052604090205416156106ba5760405162461bcd60e51b815260206004820152600560248201527f475332303400000000000000000000000000000000000000000000000000000060448201526064016101cc565b73ffffffffffffffffffffffffffffffffffffffff8216158015906106f6575073ffffffffffffffffffffffffffffffffffffffff8216600114155b6107425760405162461bcd60e51b815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064016101cc565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152602081905260409020548116908316146107bb5760405162461bcd60e51b815260206004820152600560248201527f475332303500000000000000000000000000000000000000000000000000000060448201526064016101cc565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208181526040808320805487871680865283862080549289167fffffffffffffffffffffffff0000000000000000000000000000000000000000938416179055968a1685528285208054821690971790965592849052825490941690915591519081527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf910160405180910390a160405173ffffffffffffffffffffffffffffffffffffffff821681527f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea269060200160405180910390a1505050565b6108bd610af8565b80600180546108cc9190610d75565b101561091a5760405162461bcd60e51b815260206004820152600560248201527f475332303100000000000000000000000000000000000000000000000000000060448201526064016101cc565b73ffffffffffffffffffffffffffffffffffffffff821615801590610956575073ffffffffffffffffffffffffffffffffffffffff8216600114155b6109a25760405162461bcd60e51b815260206004820152600560248201527f475332303300000000000000000000000000000000000000000000000000000060448201526064016101cc565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260208190526040902054811690831614610a1b5760405162461bcd60e51b815260206004820152600560248201527f475332303500000000000000000000000000000000000000000000000000000060448201526064016101cc565b73ffffffffffffffffffffffffffffffffffffffff828116600081815260208190526040808220805488861684529183208054929095167fffffffffffffffffffffffff00000000000000000000000000000000000000009283161790945591815282549091169091556001805491610a9383610d88565b909155505060405173ffffffffffffffffffffffffffffffffffffffff831681527ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf9060200160405180910390a18060025414610af357610af381610396565b505050565b333014610b475760405162461bcd60e51b815260206004820152600560248201527f475330333100000000000000000000000000000000000000000000000000000060448201526064016101cc565b565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b6d57600080fd5b919050565b60008060408385031215610b8557600080fd5b610b8e83610b49565b946020939093013593505050565b600060208284031215610bae57600080fd5b610bb782610b49565b9392505050565b600060208284031215610bd057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610c2557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101610bf3565b50909695505050505050565b600080600060608486031215610c4657600080fd5b610c4f84610b49565b9250610c5d60208501610b49565b9150610c6b60408501610b49565b90509250925092565b600080600060608486031215610c8957600080fd5b610c9284610b49565b9250610ca060208501610b49565b9150604084013590509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d1057610d10610cb0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181038181111561039057610390610cb0565b600081610d9757610d97610cb0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff019056fea26469706673582212208c955270c872068d8e9a9b12d1569a68cef513716129980d298ca0269e2a940d64736f6c63430008130033";

type OwnerManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OwnerManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OwnerManager__factory extends ContractFactory {
  constructor(...args: OwnerManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OwnerManager> {
    return super.deploy(overrides || {}) as Promise<OwnerManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OwnerManager {
    return super.attach(address) as OwnerManager;
  }
  override connect(signer: Signer): OwnerManager__factory {
    return super.connect(signer) as OwnerManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OwnerManagerInterface {
    return new utils.Interface(_abi) as OwnerManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OwnerManager {
    return new Contract(address, _abi, signerOrProvider) as OwnerManager;
  }
}
