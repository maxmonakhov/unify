/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "FallbackManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FallbackManager__factory>;
    getContractFactory(
      name: "Guard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Guard__factory>;
    getContractFactory(
      name: "GuardManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GuardManager__factory>;
    getContractFactory(
      name: "ModuleManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ModuleManager__factory>;
    getContractFactory(
      name: "OwnerManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnerManager__factory>;
    getContractFactory(
      name: "EtherPaymentFallback",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EtherPaymentFallback__factory>;
    getContractFactory(
      name: "StorageAccessible",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StorageAccessible__factory>;
    getContractFactory(
      name: "GnosisSafe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GnosisSafe__factory>;
    getContractFactory(
      name: "ISignatureValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignatureValidator__factory>;
    getContractFactory(
      name: "CreateCall",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CreateCall__factory>;
    getContractFactory(
      name: "GnosisSafeProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GnosisSafeProxy__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "ICrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: "UniversalFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UniversalFactory__factory>;
    getContractFactory(
      name: "IMessageService",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageService__factory>;
    getContractFactory(
      name: "MessageServiceBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageServiceBase__factory>;
    getContractFactory(
      name: "IBridgeMessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridgeMessageReceiver__factory>;
    getContractFactory(
      name: "IPolygonZkEVMBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPolygonZkEVMBridge__factory>;
    getContractFactory(
      name: "MainUnifySafeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MainUnifySafeModule__factory>;
    getContractFactory(
      name: "BaseReceiverUnifySafeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseReceiverUnifySafeModule__factory>;
    getContractFactory(
      name: "LineaReceiverUnifySafeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LineaReceiverUnifySafeModule__factory>;
    getContractFactory(
      name: "MantleReceiverUnifySafeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MantleReceiverUnifySafeModule__factory>;
    getContractFactory(
      name: "PZkVMReceiverUnifySafeModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PZkVMReceiverUnifySafeModule__factory>;

    getContractAt(
      name: "FallbackManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FallbackManager>;
    getContractAt(
      name: "Guard",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Guard>;
    getContractAt(
      name: "GuardManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GuardManager>;
    getContractAt(
      name: "ModuleManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ModuleManager>;
    getContractAt(
      name: "OwnerManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnerManager>;
    getContractAt(
      name: "EtherPaymentFallback",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EtherPaymentFallback>;
    getContractAt(
      name: "StorageAccessible",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StorageAccessible>;
    getContractAt(
      name: "GnosisSafe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GnosisSafe>;
    getContractAt(
      name: "ISignatureValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignatureValidator>;
    getContractAt(
      name: "CreateCall",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CreateCall>;
    getContractAt(
      name: "GnosisSafeProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GnosisSafeProxy>;
    getContractAt(
      name: "IProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "ICrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossDomainMessenger>;
    getContractAt(
      name: "UniversalFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UniversalFactory>;
    getContractAt(
      name: "IMessageService",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageService>;
    getContractAt(
      name: "MessageServiceBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageServiceBase>;
    getContractAt(
      name: "IBridgeMessageReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridgeMessageReceiver>;
    getContractAt(
      name: "IPolygonZkEVMBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPolygonZkEVMBridge>;
    getContractAt(
      name: "MainUnifySafeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MainUnifySafeModule>;
    getContractAt(
      name: "BaseReceiverUnifySafeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseReceiverUnifySafeModule>;
    getContractAt(
      name: "LineaReceiverUnifySafeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LineaReceiverUnifySafeModule>;
    getContractAt(
      name: "MantleReceiverUnifySafeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MantleReceiverUnifySafeModule>;
    getContractAt(
      name: "PZkVMReceiverUnifySafeModule",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PZkVMReceiverUnifySafeModule>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
